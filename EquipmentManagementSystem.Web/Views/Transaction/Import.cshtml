@model ImportModel
@{
    Html.AddScriptParts("~/Scripts/knockout-3.3.0.js");
    Html.AddScriptParts("~/Scripts/knockoutjs-plugins.js");
    Html.AddScriptParts("~/Scripts/bootstrap-datepicker.min.js");
    Html.AddScriptParts("~/Scripts/locales/bootstrap-datepicker.vi.min.js");
    Html.AddScriptParts("~/Scripts/autoNumeric/autoNumeric-1.9.25.min.js");

    Html.AddCssFileParts("~/Content/bootstrap-datepicker.min.css");
    ViewBag.Title = "Nhập hàng";
}

<div class="row">
    <div class="col-lg-12">
        <h1 class="page-header">@ViewBag.Title (@Html.ActionLink("về danh sách", "List"))</h1>
    </div>
    <!-- /.col-lg-12 -->
</div>
@using (Html.BeginForm(null, null, FormMethod.Post,new {id = "importForm"}))
{
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    Thổng tin giao dịch
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Ngày nhập kho</label>
                                @Html.TextBoxFor(model => model.TxDateFrom, new { @class = "form-control", @readonly = "readonly"})
                                @Html.ValidationMessageFor(model => model.TxDateFrom)
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label class="required">Kho nhận</label>
                                @Html.DropDownListFor(model => model.FromWarehouseProfileId, Model.AvailableWarehouseProfiles, "--- Chọn ---", new {@class = "form-control"})
                                @Html.ValidationMessageFor(model => model.FromWarehouseProfileId)
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label>Mô tả</label>
                                @Html.TextAreaFor(model => model.Note, new {@class = "form-control", rows = 5})
                                @Html.ValidationMessageFor(model => model.Note)
                            </div>
                        </div>
                    </div>
                  
                </div>
            </div>
        </div>
        <!-- /.col-lg-12 -->
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    Chi tiết giao dịch
                </div>
                <div class="panel-body form-details">
                    <div class="row">
                        <div class="col-lg-2">
                            <label>Loại sp</label>
                        </div>
                        <div class="col-lg-3">
                            <label>Sản phẩm</label>
                        </div>
                        <div class="col-lg-1">
                            <label>S.Lượng</label>
                        </div>
                        <div class="col-lg-2">
                            <label>Đơn giá</label>
                        </div>
                        <div class="col-lg-2">
                            <label>Ngày hết hạn k.hao</label>
                        </div>
                        <div class="col-lg-1">
                            <label>Giá/ngày</label>
                        </div>
                        <div class="col-lg-1">
                            <label></label>
                        </div>
                    </div>
                    <div data-bind='foreach: details'>
                        <div class="row">
                            <div class="col-lg-2">
                                <div class="form-group">
                                    <select data-bind='options: $parent.availableCategories , optionsText: "name", optionsCaption: "Chọn...", value: category' class="form-control input-sm"> </select>
                                </div>
                            </div>
                            <div class="col-lg-3">
                                <div class="form-group" data-bind="with: category">
                                    <select data-bind='options:  products , optionsText: "name",optionsValue: "id", optionsCaption: "Chọn...", value: $parent.product,attr: { name: "TransactionDetails["+$index()+"].ProductId"}' class="form-control input-sm"> </select>
                                </div>
                            </div>
                            <div class="col-lg-1">
                                <div class="form-group">
                                    <input data-bind='value: quantity,attr: { name: "TransactionDetails["+$index()+"].Qtty"}' type="hidden" />
                                    <input data-bind='autoNumeric:quantity,autoNumericSettings:{mDec: 0,vMin: 0, vMax:999999, wEmpty:"zero"},visible: product' class="form-control input-sm" />
                                </div>
                            </div>
                            <div class="col-lg-2">
                                <div class="form-group">
                                    <input data-bind='value: unitprice,attr: { name: "TransactionDetails["+$index()+"].UnitPrice"}' type="hidden" />
                                    <input data-bind='autoNumeric:unitprice,autoNumericSettings:{mDec: 0,vMin: 0, vMax:999999999999, wEmpty:"zero"},visible: product' class="form-control input-sm" name="TransactionDetails[].UnitPrice" />
                                </div>
                            </div>
                            <div class="col-lg-2">
                                <div class="form-group">
                                    <div class="input-group date" data-bind='visible: product'>
                                        <input data-bind='datepicker: {language: "vi"},value: expiredate,attr: { name: "TransactionDetails["+$index()+"].ExpireDate"}' class="form-control input-sm" /><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                                    </div>
                                    
                                </div>
                            </div>
                            <div class="col-lg-1">
                                <div class="form-group">
                                    <input data-bind='value: priceperday,attr: { name: "TransactionDetails["+$index()+"].PricePerDay"}' type="hidden" />
                                    <input data-bind='autoNumeric:priceperdaytemp,autoNumericSettings:{mDec: 0,vMin: 0, vMax:999999999, wEmpty:"zero"},visible: product' class="form-control input-sm" />
                                </div>
                            </div>
                            <div class="col-lg-1">
                                <div class="form-group">
                                    <a class="btn btn-default btn-sm" href='#' data-bind='click: $parent.removeDetail'>Xóa</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-2">
                            <a data-bind='click: addDetail' class="btn btn-default btn-sm">Thêm sản phẩm</a>
                        </div>
                    </div>
                </div>
                <div class="panel-footer">
                    <div class="row">
                        <div class="col-lg-12">
                            <a data-bind='click: save' class="btn btn-primary">Nhập hàng</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.col-lg-12 -->
    </div>
}
@section scripts
{
    <script type="text/javascript">
        var categories = @Html.Raw(Json.Encode(Model.Categories.Select(q => new {id = q.Id, name = q.Name, products = q.Products.Select(a => new {id = a.Id, name = a.Name})})));
        var TransactionDetails = function() {
            var self = this;

            self.category = ko.observable();
            self.product = ko.observable();
            self.quantity = ko.observable(1);
            self.unitprice = ko.observable(0);
            self.expiredate = ko.observable();
            self.priceperday = ko.observable(0);
            self.lastpriceperday = ko.observable(0);
            self.priceperdaytemp = ko.pureComputed({
                read: function () {
                    if (self.expiredate() && self.unitprice() && self.quantity()) {
                        var days = daydiff(parseDate('@Model.TxDateFrom'), parseDate(self.expiredate()));
                        console.log('days: ' + days);
                        console.log('unitprice: ' + self.unitprice() + ' | quantity: ' + self.quantity());
                        var newvalue = Math.round((parseFloat(self.unitprice()) * parseFloat(self.quantity())) / days);
                        if (newvalue != self.lastpriceperday()) {
                            self.lastpriceperday(newvalue);
                            self.priceperday(newvalue);
                        }

                    } else {
                        self.lastpriceperday(0);
                        self.priceperday(0);
                    }
                    return self.priceperday();

                },
                write: function (value) {
                    self.priceperday(value);
                },
                owner: this
            });
     
            self.category.subscribe(function() {
                self.product(undefined);
            });
        };
        var Transaction = function(data) {

            var self = this;
            self.details = ko.observableArray([new TransactionDetails()]);
            self.availableCategories = categories;

            // Operations
            self.addDetail = function() { self.details.push(new TransactionDetails()) };
            self.removeDetail = function(detail) { self.details.remove(detail) };
            self.save = function() {
                if (self.checkInput()) {
                    $.ajax({
                        url: '@Url.Action("_AjaxAddImport")',
                        dataType: 'json',
                        type: 'POST',
                        data: $('#importForm').serialize(),
                        success: function(data) {
                            alert(data.ErrCode);
                        }
                    });
                }
                return false;
            };
            self.checkInput = function() {
                if (!$('#FromWarehouseProfileId').val()) {
                    alert('Chưa chọn kho nhập');
                    return false;
                }
                if (!self.details() || self.details().length <= 0) {
                    alert('Chưa nhập chi tiết giao dịch');
                    return false;
                }
                return true;
            };
        };
        ko.applyBindings(new Transaction());

    </script>
}